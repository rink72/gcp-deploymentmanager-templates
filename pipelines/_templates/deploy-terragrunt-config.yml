# This template is used to run a terragrunt deployment
# You can set the parameters to deploy the required service and set a delay if required

# This template will run a terragrunt plan and apply. It uses deployment jobs so that the steps run
# in specified ADO environments. This enables us to add approvals to the apply steps so someone can review the plan step before having it run
# and make changes.

parameters:
  # Variables used to determine location of terragrunt config
  deploymentName: ""
  tgCloud: ""
  tgAccountName: ""
  tgRegion: ""
  tgEnvironment: ""
  tgServiceName: ""
  tgExtraArguments: "" # Extra args that need to be fed into a plan/apply - e.g password value for a var. Most pipelines won't require this.
  # Stage code - Used to build stage names and used for dependencies
  stageCode: ""
  # Variable to allow dependencies to be passed in to stage
  dependantStages: [] # An array of stage names that need to run first
  # Parameters to connect to AWS
  awsAccessKeyId: ""
  awsSecretAccessKey: ""
  awsRegion: ""


stages:

  - stage: Deploy_${{ parameters.stageCode }}
    displayName: Deploy - ${{ parameters.deploymentName }}
    dependsOn: ${{ parameters.dependantStages }}

    jobs:

      - deployment: JobDeploy
        pool:
          vmImage: 'windows-latest'
        displayName: Deploy
        environment: 'prod'
        workspace:
          clean: all
        variables:
          tgCloud: ${{ parameters.tgCloud }}
          tgAccountName: ${{ parameters.tgAccountName }}
          tgRegion: ${{ parameters.tgRegion }}
          tgEnvironment: ${{ parameters.tgEnvironment }}
          tgServiceName: ${{ parameters.tgServiceName }}
        strategy:
          runOnce:
            deploy:
              
              steps:

                - pwsh: |
                    choco install terraform
                    choco install terragrunt
                  name: StepBootstrapAgent
                  displayName: Bootstrap Agent

                - task: PowerShell@2
                  name: StepPlan
                  displayName: Deploy
                  inputs:
                    pwsh: true
                    targetType: filePath
                    filePath: $(Pipeline.Workspace)/awslab/awslab/terragrunt/Deploy-TerragruntConfig.ps1
                    failOnStderr: false
                    errorActionPreference: continue
                  env:
                    # Only secrets need to be manually mapped to env variables. Normal variables will automatically be mapped to env vars.
                    # We also map AWS_ACCESS_KEY_ID, AWS_REGION as the variable name is different to what is required.
                    AWS_ACCESS_KEY_ID: ${{ parameters.awsAccessKeyId }}
                    AWS_SECRET_ACCESS_KEY: ${{ parameters.awsSecretAccessKey }}
                    AWS_REGION: ${{ parameters.awsRegion }}
                    tgExtraArguments: ${{ parameters.tgExtraArguments }} # Thus is also set as an env var for the job as more than likey it contains secrets.

                - template: ../_templates/step-clean-artifact-folder.yml

