parameters:
  stageName: ''
  displayName: ''
  jobName: ''
  jobDisplayName: ''
  buildFolder: ''


stages:
  - stage: Stg${{ parameters.stageName }}
    displayName: ${{ parameters.displayName }}
    dependsOn: [] # Allows stages to run in parallel
    jobs:

      - job: Job${{ parameters.jobName }}
        displayName: ${{ parameters.jobDisplayName }}
        variables:
          buildFolder: ${{ parameters.buildFolder }}
        steps:
          - pwsh: |
              choco install packer
              Install-Module AWSPowershell.NetCore -Force
            name: StepBootstrapAgent
            displayName: Bootstrap Agent

          - task: PowerShell@2
            displayName: Build ${{ parameters.jobDisplayName }} AMI
            inputs:
              pwsh: true
              targetType: filePath
              filePath: ./$(packerRoot)/Build-AMI.ps1
            env:
              # Only secrets need to be manually mapped to env variables. Normal variables will automatically be mapped to env vars.
              # We also map AWS_ACCESS_KEY_ID, AWS_REGION, etc as the variable name is different to what is required.
              AWS_ACCESS_KEY_ID: $(aws-pwrc-sam-exp-username)  # From aws-sec-devops
              AWS_SECRET_ACCESS_KEY: $(aws-pwrc-sam-exp-secret) # From aws-sec-devops
              AWS_REGION: $(aws-pwrc-sam-exp-region) # From aws-sec-devops
              # Packer variables
              AMI_PASSWORD: $(local-admin-password) # From vm-variables
              PACKER_ROOT: $(packerRoot)
              BUILD_FOLDER: $(buildFolder)
              PACKER_VPC: $(packerBuildVPC) # From vm-variables
              PACKER_SUBNET: $(packerBuildSubnet) # From vm-variables
              # Build variables used to tag AMI's
              BUILD_ID: $(Build.BuildId)
              BUILD_REASON: $(Build.Reason)
              BUILD_BRANCH: $(Build.SourceBranch)
              COMMIT_ID: $(Build.SourceVersion)
